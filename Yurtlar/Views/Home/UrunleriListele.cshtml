@model List<Yurtlar.Models.ProductViewModel>

@{
    ViewBag.Title = "Ürünler - KYK Pazar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header bg-gradient-primary text-white py-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-5 fw-bold mb-3">
                    <i class="fas fa-shopping-bag me-3"></i>Satıştaki Ürünler
                </h1>
                <p class="lead mb-0">KYK öğrencileri tarafından satışa sunulan ürünleri keşfedin</p>
            </div>
        </div>
    </div>
</div>

<div class="container py-5">
    <!-- Search and Filter Section -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="input-group">
                <span class="input-group-text bg-white border-end-0">
                    <i class="fas fa-search text-muted"></i>
                </span>
                <input type="text" class="form-control border-start-0" id="searchInput" placeholder="Ürün ara...">
            </div>
        </div>
        <div class="col-lg-4">
            <div class="d-flex gap-2">
                <select class="form-select" id="sortSelect">
                    <option value="">Sıralama</option>
                    <option value="price-low">Fiyat (Düşükten Yükseğe)</option>
                    <option value="price-high">Fiyat (Yüksekten Düşüğe)</option>
                    <option value="name">İsim (A-Z)</option>
                    <option value="newest">En Yeni</option>
                </select>
                <button class="btn btn-outline-primary" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Filter Collapse -->
    <div class="collapse mb-4" id="filterCollapse">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Fiyat Aralığı</label>
                        <div class="d-flex gap-2">
                            <input type="number" class="form-control" placeholder="Min" id="minPrice">
                            <input type="number" class="form-control" placeholder="Max" id="maxPrice">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Yurt</label>
                        <select class="form-select" id="dormitoryFilter">
                            <option value="">Tümü</option>
                            <!-- Dinamik yurt listesi buraya gelecek -->
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Stok Durumu</label>
                        <select class="form-select" id="stockFilter">
                            <option value="">Tümü</option>
                            <option value="in-stock">Stokta Var</option>
                            <option value="low-stock">Az Stok</option>
                        </select>
                    </div>
                    <div class="col-md-3 d-flex align-items-end">
                        <button class="btn btn-primary w-100" id="applyFilters">
                            <i class="fas fa-check me-2"></i>Filtrele
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Grid -->
    <div class="row" id="productsContainer">
        @foreach (var item in Model)
        {
            <div class="col-lg-4 col-md-6 mb-4 product-card">
                <div class="card h-100 shadow-sm border-0 product-item">
                    <div class="product-image-wrapper">
                        @if (item.PImage != null)
                        {
                            var base64 = Convert.ToBase64String(item.PImage);
                            var imgSrc = $"data:image/png;base64,{base64}";
                            <img src="@imgSrc" alt="@item.PName" class="card-img-top product-image" />
                        }
                        else
                        {
                            <img src="https://via.placeholder.com/300x200?text=Resim+Yok" alt="@item.PName" class="card-img-top product-image" />
                        }
                        <div class="product-overlay">
                            <button class="btn btn-light btn-sm" onclick="viewProduct('@item.PName', '@item.PDesc', '@item.PPrice')">
                                <i class="fas fa-eye me-1"></i>Detay
                            </button>
                        </div>
                        <div class="product-badge">
                            @if (item.PStock > 10)
                            {
                                <span class="badge bg-success">Stokta</span>
                            }
                            else if (item.PStock > 0)
                            {
                                <span class="badge bg-warning">Az Stok</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Tükendi</span>
                            }
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title fw-bold text-truncate">@item.PName</h5>
                        <p class="card-text text-muted small mb-3">@item.PDesc</p>
                        <div class="mt-auto">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="h5 text-primary fw-bold mb-0">@item.PPrice ₺</span>
                                <small class="text-muted">Stok: @item.PStock</small>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">
                                    <i class="fas fa-building me-1"></i>@item.PKyk
                                </small>
                                <button class="btn btn-outline-primary btn-sm" onclick="contactSeller('@item.Phone')">
                                    <i class="fas fa-phone me-1"></i>İletişim
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- No Products Message -->
    @if (!Model.Any())
    {
        <div class="text-center py-5">
            <i class="fas fa-box-open fa-4x text-muted mb-3"></i>
            <h4 class="text-muted">Henüz ürün bulunmuyor</h4>
            <p class="text-muted">İlk ürünü siz ekleyin!</p>
            <a href="@Url.Action("SatisEkle", "Home")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>Ürün Ekle
            </a>
        </div>
    }
</div>

<!-- Product Detail Modal -->
<div class="modal fade" id="productModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="modalContent"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary" id="contactModalBtn">
                    <i class="fas fa-phone me-2"></i>İletişim Kur
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .product-card {
        transition: transform 0.3s ease;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
    }
    
    .product-item {
        border-radius: 15px;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .product-item:hover {
        box-shadow: 0 10px 25px rgba(0,0,0,0.15) !important;
    }
    
    .product-image-wrapper {
        position: relative;
        overflow: hidden;
    }
    
    .product-image {
        height: 200px;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
    
    .product-item:hover .product-image {
        transform: scale(1.05);
    }
    
    .product-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    
    .product-item:hover .product-overlay {
        opacity: 1;
    }
    
    .product-badge {
        position: absolute;
        top: 10px;
        right: 10px;
    }
    
    .card-title {
        font-size: 1.1rem;
        line-height: 1.3;
    }
    
    .card-text {
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
    
    .input-group-text {
        border-radius: 10px 0 0 10px;
    }
    
    .form-control, .form-select {
        border-radius: 10px;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .form-control:focus, .form-select:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }
    
    .btn-outline-primary {
        border-radius: 10px;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .badge {
        border-radius: 20px;
        font-weight: 600;
    }
    
    @@media (max-width: 768px) {
        .product-image {
            height: 150px;
        }
    }
</style>

<script>
function viewProduct(name, description, price) {
    document.getElementById('modalTitle').textContent = name;
    document.getElementById('modalContent').innerHTML = `
        <div class="row">
            <div class="col-md-8">
                <h6 class="text-muted">Açıklama</h6>
                <p>${description}</p>
            </div>
            <div class="col-md-4">
                <h6 class="text-muted">Fiyat</h6>
                <h4 class="text-primary fw-bold">${price} ₺</h4>
            </div>
        </div>
    `;
    new bootstrap.Modal(document.getElementById('productModal')).show();
}

function contactSeller(phone) {
    if (confirm('Satıcı ile iletişime geçmek istiyor musunuz?')) {
        window.open(`tel:${phone}`, '_blank');
    }
}

// Search functionality
document.getElementById('searchInput').addEventListener('input', function() {
    const searchTerm = this.value.toLowerCase();
    const products = document.querySelectorAll('.product-card');
    
    products.forEach(product => {
        const title = product.querySelector('.card-title').textContent.toLowerCase();
        const description = product.querySelector('.card-text').textContent.toLowerCase();
        
        if (title.includes(searchTerm) || description.includes(searchTerm)) {
            product.style.display = 'block';
        } else {
            product.style.display = 'none';
        }
    });
});

// Sort functionality
document.getElementById('sortSelect').addEventListener('change', function() {
    const sortBy = this.value;
    const container = document.getElementById('productsContainer');
    const products = Array.from(container.children);
    
    products.sort((a, b) => {
        const priceA = parseFloat(a.querySelector('.text-primary').textContent.replace('₺', ''));
        const priceB = parseFloat(b.querySelector('.text-primary').textContent.replace('₺', ''));
        const nameA = a.querySelector('.card-title').textContent;
        const nameB = b.querySelector('.card-title').textContent;
        
        switch(sortBy) {
            case 'price-low':
                return priceA - priceB;
            case 'price-high':
                return priceB - priceA;
            case 'name':
                return nameA.localeCompare(nameB);
            default:
                return 0;
        }
    });
    
    products.forEach(product => container.appendChild(product));
});
</script>
